things to change/implement: 

- _N_ACTIONS = 5, sometimes 4 depending on previous raise, or check.  
- _N_CARDS = 20 
- the way cards are stored and represented.
- must keep track of the current pot when calculating utility for each game. 
	(player balance can be kept in actual game implemtation) 
- must keep track of legal actions in a certain game state (cannot check when the pot is raised, 
cannot check when pot is raised, or cannot raise less than the raised ammount) 
- implement some sort of get_legal_actions() function that will return a legal action array according 
to some game history. 
- change logic in all game state determining functions: 
   - is_chance_node : should return true for an empty history or a history that contains exactly 4 chance events,
		      and 2 consecutive bets of the same size (to develop further)
   		      perhaps implement 2 seperate functions in order to return different logic
			- is_initial_chance_node 
			- is_flop  
    - is_terminal_node: should return true if the last action is 'f'
			if not, check whether there are exactly 7 random actions followed by 
			consecutive bets of the same size (showdown ensues) 
    	
				 
- change logic in the terminal_util() function so it takes the current pot so it can return to winner
   - implement showdown logic (with the cactus kev eval), return the util as the pot - the bets of the player  
   - if last action in history is 'f', we have a fold and the even player wins the pot, return utility of pot - bets of the player 


- implement functions that execute after chance nodes like initial card dealing and different possible flops 
	-it is important that card from the deck are removed and cannot be placed down if they are in the players hands. 
- 
    	   
 
example game :1. Jc Ks r r r r bet10 call r r r Qd Ts As b50 f 
	      2. Jc Ks r r r r bet10 bet50 bet50 
history format: r r bet10 call r r r Qd Ts As b50 f // TOKENIZE AND COUNT WORDS INSTEAD OF CHARS 

history notation: 
r - random chance event (dealing of a card) 
b10 - betting the minimum ammount 
b50 - mid sized bet 
b100 - large bet 
c - check, logically equivalent to betting 0 
f - folding, loses the pot instantly. 

Perhaps there is no need to include a 'call' action, as two consecutive bets of the same size 
is logically equivalent to calling.  

translation - player 1 has Jack of clubs and King of spades after 2 random card deals, 
he bets10 as the blind and is called, then three community cards come out, he bets 50 and the opponent folds 
determining which player's turn it is is as simple as counting the parity of the split string array.
 
rules of the game: 
at the beginning of the game, both players are dealt two cards each from a 
20 card deck containing only the 5 highest cards in each 4 suits [A,K,Q,J,T].  
There is a small blind only, where player 1 must ante 10 chips into the pot and player 2 can either
call,fold,or raise. If both players settle the first round. Three community cards are placed 
on the table, and another round of betting starts, and if all bets are called, a showdown ensues. 
The winner gets the pot, the loser has his bets deducted from his balance. 





